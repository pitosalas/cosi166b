---
title: Ajax in Rails
desc: Using Ajax with Rails
homework: 1) Continue work on Rails PA3; 2) Continue work on Project
---
<%= homework_hdr %>

1. **Read and code**: Read this Guide and do some experiments to get more of a feel for Ajax: [Working with JavaScript in Rails](https://edgeguides.rubyonrails.org/working_with_javascript_in_rails.html)

{:start="2"}
<%= include_topic :hw_ajax_question %>
{:start="3"}
1. <%= partbadge %> <%= teambadge %> <%= pdfbadge %> **Weekly Team Update:** Submit your <%= link_to_topic :weekly_progress_updates %> according to the instructions. <%= team_deliverable "Weekly Progress Update" %>

##### Ongoing Work
* **Teams**: Continue working on your projects!

##### Interesting, optional reading
* [Unobtrusive JavaScript via Ajax in Rails](https://blog.codeship.com/unobtrusive-javascript-via-ajax-rails/)
* [How to Show and Hide Elements with Vanilla Javascript](https://gomakethings.com/how-to-show-and-hide-elements-with-vanilla-javascript/)
* [8 Simple CSS3 Transitions that will Wow Your Users](https://www.webdesignerdepot.com/2014/05/8-simple-css3-transitions-that-will-wow-your-users/)
* [Incorporating Modern JavaScript Build Tools with
 Rails](https://jes.al/2017/03/incorporating-modern-javascript-build-tools-with-rails/)

#### Formal Project Review Checkpoints
* Starting this Wed till Next Wed
* This will be graded. 
* For fairness, if you dont reserve a block or miss the 1 week window, 20 points will be deducted
* Unless excused, all team members need to be present
* Use this link to reserve a 45 minute spot: [Reservation for 166 PRC](https://calendly.com/pitosalas/166)
* TAs are meeting with you right now to help you prepare
* Prepare A brief presentation (maybe 5-10 minutes)
  * Project summary
  * Major Features that you will demo on Presentation Day
  * Architecture (both implemented and planned)
  * Key interesting Technology
* Prepare A demo of what is working
  * Best if you have a "script" which will tie together the demo
  * Best if you are running on Heroku
  * Looking for:
    * Fit and finish
    * Do things actually work
    * What features are working or coming along

#### Ajax Review
* Usual process in web server
  * Browser issues an HTTP Request
  * Server responds by running action, which generates html
  * HTML is used for the response to the browser
  * Browser displays it
* Ajax process
  * Browser issues an HTTP request
  * Request is issued for remote processing
  * "In background"
  * `remote: true`
  * Server responds by running action, which generates javascript
  * Returned to the browser
  * Browser executes it
* Javascript processing
  * JS is a general purpose language
  * Browser exposes the DOM as `document.`
  * Executing js can access and modify the

#### Forms Review
* remote: true, default with form_with
* Think about what the submit button does:
  * for remote:true, it does a post or patch, requesting .js response
  * for remote:false, it does a post or patch, requesting .html response
  * if url was .json, it does a post or patch, requesting .json back
* How to ajaxify a form
  * **Decide precisely what you want to do**
  * Example where we change 'date updated' with ajax

#### Code Review
* Look at [ajax_demo](https://github.com/pitosalas/ajax_demo)
* Look at [rails_ajax_demo](https://github.com/pitosalas/rails_ajax_demo)

#### Server Push
* Not a real term :)
* Many different ways of approaching. Sort of immature right now
* Key techniques are:
  * Periodic background polling by browser
  * WebSockets and variants which maintain an open connection to server
  * Rails 5 Action Cable
* Some links to study further:
  * New Service to support Pusher on a separate Service: [Pusher Service - free push](http://pusher.com)
  * How to use WebSockets on Heroku: [Websockets on Heroku](https://devcenter.heroku.com/articles/ruby-websockets)
  * Rails 5 Action Cable, [YouTube Demo of Rails 5 Action Cable](https://www.youtube.com/watch?v=n0WUjGkDFS0)

* Look at FormsDemo for Pusher


#### Look at next class
* Look at homework <%= link_to_next_lecture %>
