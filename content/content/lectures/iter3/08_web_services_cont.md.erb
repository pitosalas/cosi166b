---
title: APIs, REST, PUSH
desc: Web Services, how they work, and how to use them
homework: 1) Experiment with REST clients and servers. Report your experiences
cat: advanced
---
<%= homework_hdr %>
**Legend**: <%=partbadge%>: Participation | <%= timebadge %>: Early | <%= pdfbadge %>: PDF |  <%=cloudbadge %>: Portfolio | <%=zipbadge %>: Zipped

1. <%= partbadge %> <%= pdfbadge %> **Read and do**: Articles and do steps below:
  * [RESTful Web Services](http://www.ibm.com/developerworks/webservices/library/ws-restful/)
  * Download and install this [WebService Demo Code](https://github.com/pitosalas/webservicedemo) to your computer. Look at all the examples and get them to work. Understand what they are doing.
  * Download and install a REST Client app. For example [rest-client](https://code.google.com/p/rest-client/) or [Chrome Advanced Rest Client](https://chrome.google.com/webstore/detail/advanced-rest-client/)
  * Familiarize yourself with one or two real Web Services (also called Web APIs or APIs). Here are some interesting starting points:
    1. Everything known about wine: [Wine.com API](https://api.wine.com)
    1. Open Government Data: [Sunlight Foundation API](http://sunlightfoundation.com/api/)
    1. APIs of cooking recipes: [Yummly](https://developer.yummly.com)
    1. [Reddit API](https://github.com/reddit/reddit/wiki/API)
    1. [US Census Bureau](http://www.census.gov/developers/)
    1. [Weather Information](http://www.wunderground.com/weather/api/)
    1. A huge directory of all kinds of web services: [Programmable Web](http://www.programmableweb.com)
  * Most web services (APIs) need an API-key of some kind (free). Get one
  * Experiment with the REST client and one of the Web services described above
  * Using the REST client app above: try some calls and get them to work
  * <%= deliverable "A post describing your experience. What api you tried and what you learned. And describing one specific way in which your product could use a Web Service API" %>
1. **Read**: About [Feature Toggles](http://martinfowler.com/articles/feature-toggles.html), and about [WebSockets and ActionCables](http://www.sitepoint.com/action-cable-and-websockets-an-in-depth-tutorial/?utm_source=rubyweekly&utm_medium=email)
1. **PR Meetings coming up!** Target your PR meeting for April 3, during lab time: between 2 and 5. You should get in touch with them asap!
1. **Prod Update with Pito**: On April 3d I would like to have 45 minute conversations with each team separately so I can hear your thinking, see your progress, and give you some suggestions or ideas as they come up. Please schedule the time with me using this link: [Pito Product Update Meetings](https://calendly.com/pitosalas/prod/04-03-2017). You will only see time slots for Monday. If you absolutely cannot make it Monday, talk to me. Otherwise, I expect to see each team individually at the selected time. The sooner you sign up on the calendly link the more flexibility you will have on the time!

#### Creating a WEB Service
* Fortune API deployed on Heroku
  * Visit the fortune_api: [Fortune API on Heroku](https://psfortune.herokuapp.com/fortune/random)
  * Let's take a look at the code
  * Let's also look at the rails code in [Web Service Demo Code](https://github.com/pitosalas/webservicedemo)

#### Accessing a web service
* Accessing and testing out a Web Api before using it
* Writing throw away code ("spikes")
* Use a gem or build a gem: isolation
* Don't be scared: How to look inside a gem at its code (see gem `gem-open`)
* If the gem doesn't do what you need, look for another one!
* Discuss the exmples in ruby [Web Service Demo Code](https://github.com/pitosalas/webservicedemo)

#### Web PUSH Capability
* Defined
* Often used in conjunction with AJAX

##### Websockets
* Websockets: Why are they needed?

<%= include_image "https://heroku-blog-files.s3.amazonaws.com/posts/1473343847-1462551384-websocket-protocol.png" %>

<%= include_image "https://heroku-blog-files.s3.amazonaws.com/posts/1473343847-1462551384-websocket-protocol.png" %>

##### ActionCable
* Rails: ActionCable: Railsification of Websockets
* [Heroku Demo](https://pscabledemo.herokuapp.com/homes/1)
* Uses system cache software called "Redis"
* Rails Server also acts as a WebSockets server
* Channel:
  * Communication channel, carrying "messages"
  * Analogous to a Controller
  * Can stream messages to subscribers
* Message
  * A packet of JSON sent from the server back to the client
  * Analogous to an action
* Consumer
  * Usually it is the web browser of a user
  * It can subscribe to messages from a certain channel
* An example that I found useful: [Real Time Rails, WebSockets](https://blog.heroku.com/real_time_rails_implementing_websockets_in_rails_5_with_action_cable)

#### Look at next class
* Look at homework <%= link_to_next_lecture %>
