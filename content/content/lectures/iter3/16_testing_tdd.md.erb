---
title: TDD
desc: Diving deeper into Testing and Quality
homework: 1) Read several articles; 2) Complete and submit PA Rails 2
cat: TDD
---
<%= homework_hdr %>
**Legend**: <%=partbadge%>: Participation | <%= timebadge %>: Early | <%= pdfbadge %>: PDF |  <%=cloudbadge %>: Portfolio | <%=zipbadge %>: Zipped

1. **Read** [The F35s terible bug list](http://www.defenseone.com/technology/2016/02/f-35s-terrifying-bug-list/125638/?oref=DefenseOneTCO) to see the real world impact that bugs have. Also tht Fighter jets are really computers with wings on them!
1. **Read** [There's more to Ruby Debugging than puts](https://engineering.shopify.com/17489080-theres-more-to-ruby-debugging-than-puts?utm_medium=email&utm_source=rubyweekly). Lots of very practical tips and ideas about debugging, as well as some really useful Ruby tricks.
1. **Read** [Test Doubles in Theory, in Minitest and Rspec](http://ieftimov.com/test-doubles-theory-minitest-rspec). Test doubles, mocks, and similar concepts are a powerful abstraction for independently testing complex subsystems. Of course we're using minitest, but rspec is a popular alternative test framework. Bottom line they are both quite similar to each other.
1. <%= zipbadge %> **Rails PA2**: Complete and submit <%= link_to_topic :pa_rails_2 %>. Begin working on <%= link_to_topic :pa_rails_3 %>. <%= deliverable "PA 2 directory zipped up and submitted to Latte" %>
1. <%= zipbadge %> **TDD**: Read some background on Test Driven Development
    * Read [MiniTest::Spec tutorial](http://www.rubyinside.com/a-minitestspec-tutorial-elegant-spec-style-testing-that-comes-with-ruby-5354.html)
    * Read [Minitest Quick Reference](http://mattsears.com/articles/2011/12/10/minitest-quick-reference)
    * Read [Rails Testing Pyramid](http://blog.codeclimate.com/blog/2013/10/09/rails-testing-pyramid/)
    * Do the following assignment: <%= link_to_topic :hw_tdd %>. Do the work in your <%= link_to_background :portfolio %> in a `tdd` directory. <%= deliverable "Zip up the directory and submit it in Latte." %>
1. <%= partbadge %> <%= pdfbadge %> **TDD** View a video talk by the original inventor of Rails where he debunks TDD. This video: [RailsConf 2014 Keynote](http://youtu.be/9LfmrkyP81M), from last year caused untold controversy. Watch it and write a brief reflection. <%= deliverable "Your reflection, with your summary of DHH's key arguments and your reaction to them. Max 1 page, pdf." %>


#### Discussion on yesterday's homework
* Did you really do TDD? What is the key to it?
* How did it feel to program in this way? Was it easier, harder, different?
* Conventions: file names, separating the tests from the code (why?)

#### Testing Intro
<%= include_topic :tdd_intro %>

#### Demo
* <%= link_to_topic :tdd_demo %>

#### Discussion
* What do "I" do with testing in "real life"?
* Let's review some of the options in [Minitest Quick Reference](http://mattsears.com/articles/2011/12/10/minitest-quick-reference)

##### Test Data
* Sometimes known as test fixtures
* What is the role of data in developing tests for your application
* Some ways of thinking about test data
* Avoiding Brittle tests
* Mocking objects
    * Let's look at some of the code that runs this web site.
    * Note slightly different syntax because of RSpec vs. minitest/spec
    * [citem_spec.rb](https://github.com/pitosalas/curriculu/blob/master/spec/citem_spec.rb)
    * [toc_spec.rb](https://github.com/pitosalas/curriculu/blob/master/spec/toc_spec.rb)

#### Testing in Rails (if we have time)
* Principle is the same
* Remember there's no good reason to test whether Rails is doing what it is supposed to do
* For example, whether validations are validating, or whether has_many is actually working
    * Maybe a few tests to poke some holes, but certainly not each and every test.

#### Let's take a tour of all the test bits that are created for free for you in Rails

<%= include_topic :testing_concepts %>
<%= include_topic :testing_pyramid %>
<%= include_topic :testing_techniques %>

#### Look at next class
* Look at homework <%= link_to_next_lecture %>
