---
title: Deeper into forms and views
desc: Additional concepts and techniques
homework: 1) Complete and submit PA Rail 3; 
cat: rails
---

<%= homework_hdr %>

1. <%= zipbadge %> **Rails PA3**: Complete and submit! <%= link_to_topic :pa_rails_3 %>. 

##### Ongoing Work
1. **Teams**: Continue working on your projects! 

##### Optional, very useful reading
* [Modern Javacript CheatSheet](https://github.com/mbeaudru/modern-js-cheatsheet)
* [Javascript Coding Conventions](http://javascript.crockford.com/code.html)
* [Service Objects Explained](https://medium.freecodecamp.org/service-objects-explained-simply-for-ruby-on-rails-5-a8cc42a5441f)
* [Routes In Ruby on Rails](https://medium.freecodecamp.org/routes-in-ruby-on-rails-5-using-resources-and-records-to-define-urls-411a68afa21a)
* [Example Code with one form based on two models](https://github.com/pitosalas/rails52_basic_form_demo)

### Forms, continued

#### Basics
* Why form handling typically requite 2 HTTP requests, two actions, two views
* Partial views and rendering
* Each of the actions in a simple case, e.g. categories_controller
* Before-action, and setting up of the 'common parameters'
* "Strong parameters"

#### Forms that come from more than one model
* Look at an example: [Rails52 Forms Demo](https://github.com/pitosalas/rails52_basic_form_demo)
  * URL
  * controller
  * View

#### Review: Context setting
* URLs have 0 to n "parameters"
* Helpers must include them too
* Actions must set them up
* Look at comments_controller
* Look at form_for in this case

#### Context setting beyond the ids
* Anything you will need in the view, you should set up in the action
* Look at ItemsController#edit and how it sets up @categories and @category
* Look at views/items/_form and how it uses those

#### Where should code go?
* This can be more confusing than you think
* Remember: as little code in the view as possible
* Remember 2: as liitle code in the controller as possible
* So, where then? models and other non-rails classes (POROs)
* Best is when you write code with NO rails dependency! (odd, right?)
* Improves testability, modularity and reusability!
* models should contain any code
  * Legitimately is related to just the 'persisted data'
  * Confusing when you need a method that touches two models

#### Respect your database!
* Notice how many calls to the database are needed to display a page
* Bad sign: O(n) database calls, where n = number of rows displayed
* More sophisticated ActiveRecord techniques to have one call do more work
* Let's take a look at the home page

### Ajax

<%= include_topic :ajax %>

#### Look at next class
* Look at homework <%= link_to_next_lecture %>
