---
title: TDD, Continued
homework: 1) Read RORT Chapter 7 and do warmups; 2) Weekly update
desc: We continue on TDD from the previous class
cat: testing
---
<%= homework_hdr %>

1. <%= partbadge %> <%= pdfbadge %> <%= teambadge %> **Teams: Codeship**: Get your app deployed onto [CodeShip](http://www.codeship.com). Log in with the email of the github account who owns the offical team repository. The documentation of CodeShip is quite good. Make sure you have at least one rails integration test to run whenever someone onbEnsure that whenever the team pushes to your master branch, the tests are automatically run and if they pass, the result is pushed out to Heroku. <%= team_deliverable "Submit the text of the log generated by Codeship to demonstrate that it is working." %>
1. <%= partbadge %> <%= teambadge %> <%= pdfbadge %> **Weekly Team Update:** Submit your <%= link_to_topic :weekly_progress_updates %> according to the instructions. <%= team_deliverable "Weekly Progress Update" %>

##### Ongoing Work
* **Teams**: Continue working on your projects!

##### Interesting, optional reading
* [Ruby Debugging Magic](http://www.schneems.com/2016/01/25/ruby-debugging-magic-cheat-sheet.html)
* [MiniTest Cookbook](https://chriskottom.com/minitestcookbook/)
* <a href="/content/topics/documents/cheatsheets.pdf">Minitest Cheat Sheet</a>

#### Today
* Let's review <%= link_to_intro :term_project %>

#### Testing continued 
<%= include_topic :mocking %>
<%= include_topic :testing_data %>

##### Testing in Rails
* Principle is the same
* Remember there's no good reason to test whether Rails is doing what it is supposed to do
* For example, whether validations are validating, or whether has_many is actually working
    * Maybe a few tests to poke some holes, but certainly not each and every test.
* Rails gives you "for free"
  * A test/ directory that includes:
    * Folders to hold tests for each part of your application
    * Folders for storing YAML fixture data (test/fixtures/) and other types of data files (test/fixtures/files)
    * A test helper file (test/test_helper.rb) that you'll use to configure your testing stack and runs
  * Generators that will spit out assert-style unit tests for any Rails components you create
  * Configuration for a test database in config/database.yml
  * A way to run your test suite or subsets of it with the rails executable (Rails 5+) or rake (previous versions)
  * A complete, pre-tuned test environment configuration
  * The Spring application preloader that speeds up tests and Rake task execution in your development and testing environments by keeping an instance of your application running in a background process (installed by default in Rails 4.1 and up)‚Äù

    **Excerpt From: Chris Kottom. "The Minitest Cookbook." iBooks**

* <%= link_to_topic :hands_on_rails_test %>

#### Look at next class
* Look at homework <%= link_to_next_lecture %>
