---
title: Test Driven Development
desc: Diving deeper into Testing and Quality
homework: 1) Read several articles
cat: testing
---
<%= homework_hdr %>
**Legend**: <%=partbadge%>: Participation | <%= timebadge %>: Early | <%= pdfbadge %>: PDF | <%=zipbadge %>: Zipped

1. **Read** [The F35s terible bug list](http://www.defenseone.com/technology/2016/02/f-35s-terrifying-bug-list/125638/?oref=DefenseOneTCO) to see the real world impact that bugs have. Also tht Fighter jets are really computers with wings on them!
1. **Read** [There's more to Ruby Debugging than puts](https://engineering.shopify.com/17489080-theres-more-to-ruby-debugging-than-puts?utm_medium=email&utm_source=rubyweekly). Lots of very practical tips and ideas about debugging, as well as some really useful Ruby tricks.
1. <%= zipbadge %> **TDD**: Read some background on Test Driven Development
    * Read [MiniTest::Spec tutorial](http://www.rubyinside.com/a-minitestspec-tutorial-elegant-spec-style-testing-that-comes-with-ruby-5354.html)
    * Read [Minitest Quick Reference](http://mattsears.com/articles/2011/12/10/minitest-quick-reference)
    * Read [Rails Testing Pyramid](http://blog.codeclimate.com/blog/2013/10/09/rails-testing-pyramid/)
    * Do the following assignment: <%= link_to_topic :hw_tdd %>. <%= deliverable "Zip up the directory and submit it in Latte." %>
1. <%= partbadge %> <%= pdfbadge %> **TDD** View a video talk by the original inventor of Rails where he debunks TDD. This video: [RailsConf 2014 Keynote](http://youtu.be/9LfmrkyP81M), from last year caused untold controversy. Watch it and write a brief reflection. <%= deliverable "Your reflection, with your summary of DHH's key arguments and your reaction to them. Max 1 page, pdf." %>

#### Optional, very useful reading

* [Software Glitch in the Apollo Lunar Mission (3 minutes)](https://spectrum.ieee.org/video/aerospace/space-flight/don-eyles-space-hacker?utm_source=computingtechnology&utm_campaign=computingtechnology-07-24-18&utm_medium=email)
* [Test Doubles in Theory, in Minitest and Rspec](http://ieftimov.com/test-doubles-theory-minitest-rspec). Test doubles, mocks, and similar concepts are a powerful abstraction for independently testing complex subsystems. Of course we're using minitest, but rspec is a popular alternative test framework. Bottom line they are both quite similar to each other.
* Good advanced testing concepts: [Test Doubles â€“ Fakes, Mocks and Stubs](http://pragmatists.pl/blog/2017/03/test-doubles-fakes-mocks-or-stubs/?__s=sp8sgb9wzgpq5zssprse)
* [Minitest Quick Reference](http://mattsears.com/articles/2011/12/10/minitest-quick-reference)
* [Getting Started with Minitest](https://blog.codeship.com/getting-started-with-minitest/)
* [Code Samples from MiniTest Cookbook](https://github.com/chriskottom/minitest_cookbook_source.git)

#### Donald Knuth quote
* Interesting from an old archival letter between Knuth and Emde Boas.
* Knuth very famous, Emde Boas, not so much.
* If you look at the attached paper you also see what I think is one of the very earliest uses of classes. It is on Figure 2: Page 1 of classroom note.

<a href="https://staff.fnwi.uva.nl/p.vanemdeboas/knuthnote.pdf"><img src="/content/topics/images/bewarebugs.jpg" class="img-thumbnail" style="height:300px;"/></a>

#### Testing and TDD Intro
<%= include_topic :tdd_intro %>

#### Discussion on the homework

* Did you really do ? What is the key to it?
* How did it feel to program in this way? Was it easier, harder, different?
* Conventions: file names, separating the tests from the code (why?)
* What do "I" do with testing in "real life"?
* Whats the difference between Rspec and Minitest?

#### Demo
* <%= link_to_topic :tdd_demo %>

<%= include_topic :testing_concepts %>
<%= include_topic :testing_pyramid %>
<%= include_topic :mocking %>
<%= include_topic :testing_fixtures %>

#### Look at next class
* Look at homework <%= link_to_next_lecture %>
