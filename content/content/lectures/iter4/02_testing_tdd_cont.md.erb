---
title: TDD, Continued
homework: 1) Read RORT Chapter 7 and do warmups
desc: We continue on TDD from the previous class
cat: TDD
---
<%= homework_hdr %>
**Legend**: <%=partbadge%>: Participation | <%= timebadge %>: Early | <%= pdfbadge %>: PDF |  <%=cloudbadge %>: Portfolio | <%=zipbadge %>: Zipped

1. <%= partbadge %> <%= timebadge %> <%= pdfbadge %> **RORT:** Read [Ruby on Rails Tutorial (\[RORT\])](https://www.railstutorial.org/book/beginning#cha-beginning) Chapter 7, "Sign Up". This chapter covers routes, controllers and actions, reviewing what was demoed in class last week. You will encounter the vaunted `form_for` again. And you will for the first time you will see the routes "resources" line. You will finally deploy what you have so far onto heroku.

    As usual I really encourage and ask you to go through the code samples and actually type them in. You will see that it really helps your understanding and will assure your success in this course! Use your resources: the TAs, the class mailing list, stack overflow, google and push through to success! When you are done, go to Latte and answer these warmup questions:

    * What things do the different rails environments  (develop, test, production) affect? I would like to see at least two beyond the choice of database. And an explanation of each of the two, not just a parphrase of what's in the book!
    * What are all the effects that you can find that the "resources" line does in the routes.rb file?
    * What's a gravatar? Are you going to use them in your product? How does it work?
    * On figure 7.18 (and many others) you see "the form contains 3 errors" and a list of erorrs. Exactly what lines of the view are causing that text to show up on the form? Can you explain how that works?
    * Are there one or two things you are still confused by? If not, what one or two things were the most memorable about your reading? <%= deliverable "Do the warmup in Latte and submit by 10am on the day of class." %>
1. <%= partbadge %> <%= pdfbadge %> **Teams: Codeship**: Get your app deployed onto [CodeShip](http://www.codeship.com). Log in with the email of the github account who owns the offical team repository. The documentation of CodeShip is quite good. Make sure you have at least one rails integration test to run whenever someone onbEnsure that whenever the team pushes to your master branch, the tests are automatically run and if they pass, the result is pushed out to Heroku. <%= team_deliverable "Submit the text of the log generated by Codeship to demonstrate that it is working." %>

#### For Further Study
* [Ruby Debugging Magic CheatSheet](http://www.schneems.com/2016/01/25/ruby-debugging-magic-cheat-sheet.html)
* <%= link_to_topic :tdd_rails_demo %>
* [MiniTest Cookbook](https://chriskottom.com/minitestcookbook/)

<%= include_topic :push_processing %>

#### Testing in Rails
* Principle is the same
* Remember there's no good reason to test whether Rails is doing what it is supposed to do
* For example, whether validations are validating, or whether has_many is actually working
    * Maybe a few tests to poke some holes, but certainly not each and every test.
* Rails gives you "for free"
  *A test/ directory that includes:
    * Folders to hold tests for each part of your application
    * Folders for storing YAML fixture data (test/fixtures/) and other types of data files (test/fixtures/files)
    * A test helper file (test/test_helper.rb) that you'll use to configure your testing stack and runs
  * Generators that will spit out assert-style unit tests for any Rails components you create
  * Configuration for a test database in config/database.yml
  * A way to run your test suite or subsets of it with the rails executable (Rails 5+) or rake (previous versions)
  * A complete, pre-tuned test environment configuration
  * The Spring application preloader that speeds up tests and Rake task execution in your development and testing environments by keeping an instance of your application running in a background process (installed by default in Rails 4.1 and up)‚Äù

    **Excerpt From: Chris Kottom. "The Minitest Cookbook." iBooks**

* <%= link_to_topic :hands_on_rails_test %>

#### Look at next class
* Look at homework <%= link_to_next_lecture %>
