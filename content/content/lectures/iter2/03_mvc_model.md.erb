---
title: MVC and the model
desc: See how MVC works and is designed and implemented
homework: 1) Db design practice; 2) Read RORT Chapter 4; teams continue working on projects
cat: rails
---
<%= homework_hdr %>
**Legend**: <%=partbadge%>: Participation | <%= timebadge %>: Early | <%= pdfbadge %>: PDF |  <%=cloudbadge %>: Portfolio | <%=zipbadge %>: Zipped

1. <%= pdfbadge %> **Schema Practice**: Do <%= link_to_topic :hw_schema_design %>. <%= deliverable "Submit a pdf with a schema for each of the assignments, using the exact format suggested." %>
1. <%= partbadge %> <%= timebadge %> <%= pdfbadge %> **RORT:** Read [Ruby on Rails Tutorial (\[RORT\])](https://www.railstutorial.org/book/beginning#cha-beginning) Chapter 4, "Rails Flavored Ruby". This is an easier chapter, reviewing a variety of Ruby topics that are extended in Rails. This is possible by the way because Ruby as a programming language is very extensible, and Rails takes advantage of this. It has not been unusual to notice features invented by the Rails team which over time get moved into Ruby core. This chapter is an excellent review of Ruby as well. As usual I really encourage and ask you to go through the code samples and actually type them in. You will see that it really helps your understanding and will assure your success in this course! Use your resources: the TAs, the class mailing list, stack overflow, google and push through to success! When you are done, go to Latte and answer these warmup questions:
  * Give me your explanation of what a symbol is in Ruby. Write a very brief few lines of Ruby to illustrate.
  * What is meant by the idea that Ruby classes can be "opened up" or "reopened"?
  * What is the difference between 'require' and 'require_relative' in Ruby?
  * Are there one or two things you are still confused by? If not, what one or two things were the most memorable about your reading? <%= deliverable "Do the warmup in Latte and submit by 8am on the day of class." %>
1. **Projects:** You should be working or completed steps **GIT, DOCUMENTATION, PLANSKEL, SHEMASKEL, BUILDSKEL, STORYSDV, PAPERSDV, SCHEMASDV**.
1. **Optional**: Interesting article about [Design Constraints: Why Saying "No" is so Effective
](https://www.toptal.com/designers/ui/design-constraints?utm_campaign=blog_post_design_constraints&utm_medium=email&utm_source=blog_subscribers)

<%= include_topic :mvc_review %>

#### Models and the Database
<%= include_topic :database_migration %>
<%= include_topic :ar_db_mechanics %>

#### Live coding
* <%= link_to_topic :rails_db_models %>

#### Look at next class
* Look at homework <%= link_to_next_lecture %>
