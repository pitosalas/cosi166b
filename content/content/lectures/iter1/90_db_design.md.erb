---
title: Database Design
desc: Applied DB Design, for your products
homework: 1) Complete Rails PA1; 2) Individually design initial schemas for your products; 3) Read and do RORT Chapter 4
cat: db
---

<%= homework_hdr show_legend: :on %>

1. <%= pdfbadge %> Develop an initial schema for your product. Read [Basics of good database design in Web Development](http://www.onextrapixel.com/2011/03/17/the-basics-of-good-database-design-in-web-development/). You might google around for other sources if you like. You need to think clearly about the functionality that your system will support. You also need to think carefully about relationships.

	For example, let's say I have a Student entity and I have a Course entity. Is there exactly one student for every course (1 to 1). Are there many students for any one course (many to 1) or perhaps does one student have many courses (1 to many), or maybe even a combination - one student can have many courses, and one course can have many students - (many to many). Don't even start worrying about designing your database until you have questions like that clear in your mind!

	Using all that background, develop initial schema for your product. Each team member work separately so you can then compare and contrast what you came up with. So this is an individual assignment! Include table names, field or attribute names, and relations or joins. **Please use this exact format: <%= link_to_topic :simple_schema_notation %>** <%= deliverable "Initial schema for your product. As a pdf file generated any way you want. Use the required format!! Include your name and hw number!" %>
1. <%= partbadge %> <%= pdfbadge %> **RORT:** Read [Ruby on Rails Tutorial (\[RORT\])](https://www.railstutorial.org/book/beginning#cha-beginning) Chapter 4, "Rails Flavored Ruby". This is an easier chapter, reviewing a variety of Ruby topics that are extended in Rails. This is possible by the way because Ruby as a programming language is very extensible, and Rails takes advantage of this. It has not been unusual to notice features invented by the Rails team which over time get moved into Ruby core. This chapter is an excellent review of Ruby as well. As usual I really encourage and ask you to go through the code samples and actually type them in. You will see that it really helps your understanding and will assure your success in this course! Use your resources: the TAs, the class mailing list, stack overflow, google and push through to success! When you are done, go to Latte and answer these warmup questions:
	* Give me your explanation of what a symbol is in Ruby. Write a very brief few lines of Ruby to illustrate.
	* What is meant by the idea that Ruby classes can be "opened up" or "reopened"?
	* What is the difference between 'require' and 'require_relative' in Ruby?
	* Are there one or two things you are still confused by? If not, what one or two things were the most memorable about your reading? <%= deliverable "Do the warmup in Latte and submit by 10am on the day of class." %>
1. <%= teambadge %> <%= partbadge %> **Weekly Team Update:** Submit your <%= link_to_topic :weekly_progress_updates %> according to the instructions. <%= team_deliverable "Weekly Progress Update" %>

##### Ongoing Work

* **Project teams:** Even though there are no specific deliverables, you should be working on steps up to and around **SCHEMA** from <%= link_to_section :intro, :project_roadmap %>. Not just during lab and during your meetings, but on your own. Remember with a team of four (or 3 or 5) students, that's a lot of horsepower, and so we have high expectations. The sooner you kick into gear the better!
* **PA Rails 1:** Continue working on this, Due Oct 9. Remember, this series are pretty challenging. Please don't wait till the last minute!


#### Review Homework
* Discuss some exemplar Schemas that were designed
* How hard is it to follow the syntax required?

#### Relational Databases and Object Oriented Software
* What does an ORM do?
* "Impendance misatch"
* The "ActiveRecord" Object Oriented Pattern
	* Wraps records *you are working on* inside an object of the Active Record pattern
	* **Not** every record in the database, just what the code is working on at one time or another
* The Rails Activerecord layer
* What is the relationship between the underlying DB and the AR objects
* What is database Migration. What problem does it solve?

<%= include_topic :data_modeling %>

#### Look at next class
* Look at homework <%= link_to_next_lecture %>
