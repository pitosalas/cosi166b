---
title: Capstone Project Outline
desc: Handy guide for the general sequence of steps
---
This list is meant to help each project to get going. As you make more progress you will see that the items on the list may not match up perfectly, or as likely that there are lots of items missing. That's why it's just a kickstarter, not a recipe!

##### Hello World! (lecture 7 - 13)
* **KICKOFF and ALIGN:** Initial meeting. Review <%= link_to_topic :working_in_teams %> for ideas on how to organize your first meeting. Discuss roles and intertests and confirm expectations.
* **GIT:**  Setup a single github repo for our team. Be careful: Create it on github, giving it a name corresponding to your project. Then, clone it onto each team member's computer. Make the repo private and make each team member a collaborator. Go through the trouble of learning what ssh is and setting it up because your life will be much more pleasant.
* **DOCUMENTATION:**  Setup trello and begin using Kanban to keep track of tasks and commitments. Include the link to your trello in your readme for your project. Invite Pito and the TAs all to be able to view your trello. You can use <%= link_to_topic :mini_scrum %> as a guide to how to use Trello. 
* **PLAN:** Decide informally as a team what you want to do as the "hello world" version. Typical would be to have a very simple page layout with a title and a single list. Think about what the most "essential" noun ("thing") is in your product. Is it the students? the professors and courses? the games and characters? the events? It doesn't matter too much at this stage. But that might be the first "models" or "resources" you create? The "Hello World" version might list them, allow you to create one, delete one and so on. You can decide. It should just be pretty minimal.
* **SCHEMA:** Decide the attributes (or properties or columns)are of the first few models. Figure out what the schema will be and how the associations run. Create stories in Trello and build the migrations and the models and views.
* **BUILD:**  Create it using scaffolding. For this you will be using one or more `rails generate resource` commands. This should come right out of the Rails Tutorial you've been reading.
* **SEED:** This means data which is not from real users but used to "seed" the database. There are many reasons for Seed data: to allow you to test, to allow you to see your UI better, and sometimes  because there are some bits of data that are built into the system. Seed data will be stored in the database just like live data and Rails provides you nice tools more managing and working with seed data. There is a very neat package to create fun fake names, addresses and all kinds of other information. It's very popular and is called [Faker](https://github.com/faker-ruby/faker). This is a pretty reasonable guide (I looked around) to get you started: [Seeding a database using the Rails command line](https://davidmles.com/seeding-database-rails/)
* **RUNHW:** Get it running on your personal computers, checked into Github.
* **HEROKUHW:** Get it deployed in the cloud on Heroku (see <%= link_to_topic :hands_on_heroku %> )

##### Core (lecture 14 - 18)
* **STORY:** Prioritized story list for your release 1.0. Add to trello. This is expected to be maintaiend as the project continues.
* **PAPER:** Prepare a paper prototype of the key screens of your 1.0, plus UX flows
* **SCHEMA:** Elaborate the schema for your application
* **VIEWSMODEL:** Identify and describe your key views and models
* **URLS:** Work out your URL scheme and build the routes
* **SCAFFOLD:** Use rails generators to generate scaffolding for your key models and views
* **DB:** Database up and running (focus on core views)
* **UIBASIC:** Implement many of your forms and views. STRONGLY ADVISE agains AJAX at this point!
* **ACCTS:** User accounts: registration, login, logout, administration
* **GEMRESEARCH:** Identify what gems you need and learn them
* **AUTHENT:** Implement initial set of authentication and authorization views
* **UNITTEST:** Basic unit tests of models and one or two integration tests
* **DEPLOY:** Deployed to Codeship and Heroku

##### Launch (lecture 19 - 26)
* **DEMODATA:** Build up some interesting demonstration data to show off your product.
* **KEYVIEWS:** Implement Key Views for app
* **ADDTESTS:** Write more tests
* **RAILSADMIN:** Use RailsAdmin to quickly get an admnin UI to all your data
* **BOOTSTRSAP:** Use Bootstrap for your UI framework (recommended)
* **BACKGPROC:** Background processing if needed
* **MAPS:** Google Maps if needed
* **CI:** Implement continuous integration and/or deployment
* **UIPRETTY:** Make it pretty
* **FINAL:** Final touches, prepare presentations
